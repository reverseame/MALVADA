import argparse
import json
import glob
import os


def parse_arguments():
    parser = argparse.ArgumentParser(
        description="Reads each .json report, retrieving the sha256 and the consensus AVClass and"
        "CAPE label. Also prints how many reports have no consensus. Generates"
        "reports_consensus_label.json.")
    parser.add_argument(
        "json_dir", help="The directory containing report files, as generated by MALVADA.")
    # parser.add_argument("--fig_title", help="(Optional) Specify the title of the generated figure. By default it is empty.")
    # parser.add_argument("--level", help="Specifies the desired behavioral catalog level for which the figure will be generated.", choices=["micro-objective", "micro-behavior"], required=True)
    arguments = parser.parse_args()
    return arguments


if __name__ == "__main__":
    arguments = parse_arguments()

    file_list = glob.glob(arguments.json_dir + "/*.json")

    report_entries = {}
    cape_non_label_reports = 0
    avclass_non_label_reports = 0
    both_non_label_reports = 0

    for file in file_list:
        with open(file) as f:
            try:
                data = json.load(f)
            except Exception as e:
                print(f"Error parsing file {file}. Skipping it!")
                continue
            report_name = os.path.basename(file)

            # Create common info to both entries
            sha256 = data["target"]["file"]["sha256"]
            report_entries[sha256] = {}

            # Retrieve labels
            avclass_label = data["avclass_detection"].capitalize()
            cape_label = data["detections"][0]["family"].capitalize(
            ) if data["detections"] != "(n/a)" else "(n/a)"

            report_entries[sha256]['avclass'] = avclass_label
            report_entries[sha256]['cape'] = cape_label

            if avclass_label == "(n/a)" and cape_label == "(n/a)":
                both_non_label_reports += 1
                avclass_non_label_reports += 1
                cape_non_label_reports += 1
            elif avclass_label == "(n/a)":
                avclass_non_label_reports += 1
            elif cape_label == "(n/a)":
                cape_non_label_reports += 1

    new_entries = {}
    new_entries["reports_avclass_no_consensus"] = avclass_non_label_reports
    new_entries["reports_cape_no_consensus"] = cape_non_label_reports
    new_entries["reports_both_no_consensus"] = both_non_label_reports
    new_entries.update(report_entries)

    with open("reports_consensus_label.json", "w") as file:
        json.dump(new_entries, file, indent=4)
